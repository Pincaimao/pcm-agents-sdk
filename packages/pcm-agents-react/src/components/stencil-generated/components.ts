'use client';

/**
 * This file was automatically generated by the Stencil React Output Target.
 * Changes to this file may cause incorrect behavior and will be lost if the code is regenerated.
 */

/* eslint-disable */

import type { EventName, StencilReactComponent } from '@stencil/react-output-target/runtime';
import { createComponent } from '@stencil/react-output-target/runtime';
import { type CareerPlanType, type ChatMessage, type ConversationStartEventData, type FileUploadResponse, type InterviewCompleteEventData, type PcmAppChatModalCustomEvent, type PcmChatMessageCustomEvent, type PcmChatModalCustomEvent, type PcmHrChatModalCustomEvent, type PcmHtwsModalCustomEvent, type PcmHyzjModalCustomEvent, type PcmJdModalCustomEvent, type PcmJlppModalCustomEvent, type PcmMnctModalCustomEvent, type PcmMnmsModalCustomEvent, type PcmMsbgModalCustomEvent, type PcmVideoChatModalCustomEvent, type PcmZskChatModalCustomEvent, type PcmZyghModalCustomEvent, type RecordingErrorEventData, type RecordingStatusChangeEventData, type StreamCompleteEventData } from "pcm-agents";
import { MyComponent as MyComponentElement, defineCustomElement as defineMyComponent } from "pcm-agents/dist/components/my-component.js";
import { PcmAppChatModal as PcmAppChatModalElement, defineCustomElement as definePcmAppChatModal } from "pcm-agents/dist/components/pcm-app-chat-modal.js";
import { PcmButton as PcmButtonElement, defineCustomElement as definePcmButton } from "pcm-agents/dist/components/pcm-button.js";
import { PcmCard as PcmCardElement, defineCustomElement as definePcmCard } from "pcm-agents/dist/components/pcm-card.js";
import { PcmChatMessage as PcmChatMessageElement, defineCustomElement as definePcmChatMessage } from "pcm-agents/dist/components/pcm-chat-message.js";
import { PcmChatModal as PcmChatModalElement, defineCustomElement as definePcmChatModal } from "pcm-agents/dist/components/pcm-chat-modal.js";
import { PcmHrChatModal as PcmHrChatModalElement, defineCustomElement as definePcmHrChatModal } from "pcm-agents/dist/components/pcm-hr-chat-modal.js";
import { PcmHtwsModal as PcmHtwsModalElement, defineCustomElement as definePcmHtwsModal } from "pcm-agents/dist/components/pcm-htws-modal.js";
import { PcmHyzjModal as PcmHyzjModalElement, defineCustomElement as definePcmHyzjModal } from "pcm-agents/dist/components/pcm-hyzj-modal.js";
import { PcmJdModal as PcmJdModalElement, defineCustomElement as definePcmJdModal } from "pcm-agents/dist/components/pcm-jd-modal.js";
import { PcmJlppModal as PcmJlppModalElement, defineCustomElement as definePcmJlppModal } from "pcm-agents/dist/components/pcm-jlpp-modal.js";
import { PcmMnctModal as PcmMnctModalElement, defineCustomElement as definePcmMnctModal } from "pcm-agents/dist/components/pcm-mnct-modal.js";
import { PcmMnmsModal as PcmMnmsModalElement, defineCustomElement as definePcmMnmsModal } from "pcm-agents/dist/components/pcm-mnms-modal.js";
import { PcmMsbgModal as PcmMsbgModalElement, defineCustomElement as definePcmMsbgModal } from "pcm-agents/dist/components/pcm-msbg-modal.js";
import { PcmVideoChatModal as PcmVideoChatModalElement, defineCustomElement as definePcmVideoChatModal } from "pcm-agents/dist/components/pcm-video-chat-modal.js";
import { PcmZskChatModal as PcmZskChatModalElement, defineCustomElement as definePcmZskChatModal } from "pcm-agents/dist/components/pcm-zsk-chat-modal.js";
import { PcmZyghModal as PcmZyghModalElement, defineCustomElement as definePcmZyghModal } from "pcm-agents/dist/components/pcm-zygh-modal.js";
import React from 'react';

type MyComponentEvents = NonNullable<unknown>;

export const MyComponent: StencilReactComponent<MyComponentElement, MyComponentEvents> = /*@__PURE__*/ createComponent<MyComponentElement, MyComponentEvents>({
    tagName: 'my-component',
    elementClass: MyComponentElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as MyComponentEvents,
    defineCustomElement: defineMyComponent
});

type PcmAppChatModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onStreamComplete: EventName<PcmAppChatModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmAppChatModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmAppChatModalCustomEvent<InterviewCompleteEventData>>,
    onRecordingError: EventName<PcmAppChatModalCustomEvent<RecordingErrorEventData>>,
    onRecordingStatusChange: EventName<PcmAppChatModalCustomEvent<RecordingStatusChangeEventData>>
};

export const PcmAppChatModal: StencilReactComponent<PcmAppChatModalElement, PcmAppChatModalEvents> = /*@__PURE__*/ createComponent<PcmAppChatModalElement, PcmAppChatModalEvents>({
    tagName: 'pcm-app-chat-modal',
    elementClass: PcmAppChatModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onRecordingError: 'recordingError',
        onRecordingStatusChange: 'recordingStatusChange'
    } as PcmAppChatModalEvents,
    defineCustomElement: definePcmAppChatModal
});

type PcmButtonEvents = NonNullable<unknown>;

export const PcmButton: StencilReactComponent<PcmButtonElement, PcmButtonEvents> = /*@__PURE__*/ createComponent<PcmButtonElement, PcmButtonEvents>({
    tagName: 'pcm-button',
    elementClass: PcmButtonElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PcmButtonEvents,
    defineCustomElement: definePcmButton
});

type PcmCardEvents = NonNullable<unknown>;

export const PcmCard: StencilReactComponent<PcmCardElement, PcmCardEvents> = /*@__PURE__*/ createComponent<PcmCardElement, PcmCardEvents>({
    tagName: 'pcm-card',
    elementClass: PcmCardElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {} as PcmCardEvents,
    defineCustomElement: definePcmCard
});

type PcmChatMessageEvents = { onMessageChange: EventName<PcmChatMessageCustomEvent<Partial<ChatMessage>>> };

export const PcmChatMessage: StencilReactComponent<PcmChatMessageElement, PcmChatMessageEvents> = /*@__PURE__*/ createComponent<PcmChatMessageElement, PcmChatMessageEvents>({
    tagName: 'pcm-chat-message',
    elementClass: PcmChatMessageElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: { onMessageChange: 'messageChange' } as PcmChatMessageEvents,
    defineCustomElement: definePcmChatMessage
});

type PcmChatModalEvents = {
    onMessageSent: EventName<CustomEvent<string>>,
    onModalClosed: EventName<CustomEvent<void>>,
    onStreamComplete: EventName<PcmChatModalCustomEvent<StreamCompleteEventData>>
};

export const PcmChatModal: StencilReactComponent<PcmChatModalElement, PcmChatModalEvents> = /*@__PURE__*/ createComponent<PcmChatModalElement, PcmChatModalEvents>({
    tagName: 'pcm-chat-modal',
    elementClass: PcmChatModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onMessageSent: 'messageSent',
        onModalClosed: 'modalClosed',
        onStreamComplete: 'streamComplete'
    } as PcmChatModalEvents,
    defineCustomElement: definePcmChatModal
});

type PcmHrChatModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onStreamComplete: EventName<PcmHrChatModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmHrChatModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmHrChatModalCustomEvent<InterviewCompleteEventData>>,
    onRecordingError: EventName<CustomEvent<{
        type: string;
        message: string;
        details?: any;
    }>>,
    onRecordingStatusChange: EventName<CustomEvent<{
        status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
        details?: any;
    }>>
};

export const PcmHrChatModal: StencilReactComponent<PcmHrChatModalElement, PcmHrChatModalEvents> = /*@__PURE__*/ createComponent<PcmHrChatModalElement, PcmHrChatModalEvents>({
    tagName: 'pcm-hr-chat-modal',
    elementClass: PcmHrChatModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onRecordingError: 'recordingError',
        onRecordingStatusChange: 'recordingStatusChange'
    } as PcmHrChatModalEvents,
    defineCustomElement: definePcmHrChatModal
});

type PcmHtwsModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onUploadSuccess: EventName<PcmHtwsModalCustomEvent<FileUploadResponse>>,
    onStreamComplete: EventName<PcmHtwsModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmHtwsModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmHtwsModalCustomEvent<InterviewCompleteEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmHtwsModal: StencilReactComponent<PcmHtwsModalElement, PcmHtwsModalEvents> = /*@__PURE__*/ createComponent<PcmHtwsModalElement, PcmHtwsModalEvents>({
    tagName: 'pcm-htws-modal',
    elementClass: PcmHtwsModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onUploadSuccess: 'uploadSuccess',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onTokenInvalid: 'tokenInvalid'
    } as PcmHtwsModalEvents,
    defineCustomElement: definePcmHtwsModal
});

type PcmHyzjModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onUploadSuccess: EventName<PcmHyzjModalCustomEvent<FileUploadResponse>>,
    onStreamComplete: EventName<PcmHyzjModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmHyzjModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmHyzjModalCustomEvent<InterviewCompleteEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmHyzjModal: StencilReactComponent<PcmHyzjModalElement, PcmHyzjModalEvents> = /*@__PURE__*/ createComponent<PcmHyzjModalElement, PcmHyzjModalEvents>({
    tagName: 'pcm-hyzj-modal',
    elementClass: PcmHyzjModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onUploadSuccess: 'uploadSuccess',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onTokenInvalid: 'tokenInvalid'
    } as PcmHyzjModalEvents,
    defineCustomElement: definePcmHyzjModal
});

type PcmJdModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onStreamComplete: EventName<PcmJdModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmJdModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmJdModalCustomEvent<InterviewCompleteEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmJdModal: StencilReactComponent<PcmJdModalElement, PcmJdModalEvents> = /*@__PURE__*/ createComponent<PcmJdModalElement, PcmJdModalEvents>({
    tagName: 'pcm-jd-modal',
    elementClass: PcmJdModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onTokenInvalid: 'tokenInvalid'
    } as PcmJdModalEvents,
    defineCustomElement: definePcmJdModal
});

type PcmJlppModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onUploadSuccess: EventName<PcmJlppModalCustomEvent<FileUploadResponse>>,
    onStreamComplete: EventName<PcmJlppModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmJlppModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmJlppModalCustomEvent<InterviewCompleteEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmJlppModal: StencilReactComponent<PcmJlppModalElement, PcmJlppModalEvents> = /*@__PURE__*/ createComponent<PcmJlppModalElement, PcmJlppModalEvents>({
    tagName: 'pcm-jlpp-modal',
    elementClass: PcmJlppModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onUploadSuccess: 'uploadSuccess',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onTokenInvalid: 'tokenInvalid'
    } as PcmJlppModalEvents,
    defineCustomElement: definePcmJlppModal
});

type PcmMnctModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onUploadSuccess: EventName<PcmMnctModalCustomEvent<FileUploadResponse>>,
    onStreamComplete: EventName<PcmMnctModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmMnctModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmMnctModalCustomEvent<InterviewCompleteEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmMnctModal: StencilReactComponent<PcmMnctModalElement, PcmMnctModalEvents> = /*@__PURE__*/ createComponent<PcmMnctModalElement, PcmMnctModalEvents>({
    tagName: 'pcm-mnct-modal',
    elementClass: PcmMnctModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onUploadSuccess: 'uploadSuccess',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onTokenInvalid: 'tokenInvalid'
    } as PcmMnctModalEvents,
    defineCustomElement: definePcmMnctModal
});

type PcmMnmsModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onUploadSuccess: EventName<PcmMnmsModalCustomEvent<FileUploadResponse>>,
    onStreamComplete: EventName<PcmMnmsModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmMnmsModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmMnmsModalCustomEvent<InterviewCompleteEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>,
    onRecordingError: EventName<PcmMnmsModalCustomEvent<RecordingErrorEventData>>
};

export const PcmMnmsModal: StencilReactComponent<PcmMnmsModalElement, PcmMnmsModalEvents> = /*@__PURE__*/ createComponent<PcmMnmsModalElement, PcmMnmsModalEvents>({
    tagName: 'pcm-mnms-modal',
    elementClass: PcmMnmsModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onUploadSuccess: 'uploadSuccess',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onTokenInvalid: 'tokenInvalid',
        onRecordingError: 'recordingError'
    } as PcmMnmsModalEvents,
    defineCustomElement: definePcmMnmsModal
});

type PcmMsbgModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onUploadSuccess: EventName<PcmMsbgModalCustomEvent<FileUploadResponse>>,
    onStreamComplete: EventName<PcmMsbgModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmMsbgModalCustomEvent<ConversationStartEventData>>,
    onInterviewComplete: EventName<PcmMsbgModalCustomEvent<InterviewCompleteEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmMsbgModal: StencilReactComponent<PcmMsbgModalElement, PcmMsbgModalEvents> = /*@__PURE__*/ createComponent<PcmMsbgModalElement, PcmMsbgModalEvents>({
    tagName: 'pcm-msbg-modal',
    elementClass: PcmMsbgModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onUploadSuccess: 'uploadSuccess',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onInterviewComplete: 'interviewComplete',
        onTokenInvalid: 'tokenInvalid'
    } as PcmMsbgModalEvents,
    defineCustomElement: definePcmMsbgModal
});

type PcmVideoChatModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onStreamComplete: EventName<PcmVideoChatModalCustomEvent<StreamCompleteEventData>>,
    onInterviewComplete: EventName<PcmVideoChatModalCustomEvent<InterviewCompleteEventData>>,
    onRecordingError: EventName<CustomEvent<{
        type: string;
        message: string;
        details?: any;
    }>>,
    onRecordingStatusChange: EventName<CustomEvent<{
        status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
        details?: any;
    }>>
};

export const PcmVideoChatModal: StencilReactComponent<PcmVideoChatModalElement, PcmVideoChatModalEvents> = /*@__PURE__*/ createComponent<PcmVideoChatModalElement, PcmVideoChatModalEvents>({
    tagName: 'pcm-video-chat-modal',
    elementClass: PcmVideoChatModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onStreamComplete: 'streamComplete',
        onInterviewComplete: 'interviewComplete',
        onRecordingError: 'recordingError',
        onRecordingStatusChange: 'recordingStatusChange'
    } as PcmVideoChatModalEvents,
    defineCustomElement: definePcmVideoChatModal
});

type PcmZskChatModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onStreamComplete: EventName<PcmZskChatModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmZskChatModalCustomEvent<ConversationStartEventData>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmZskChatModal: StencilReactComponent<PcmZskChatModalElement, PcmZskChatModalEvents> = /*@__PURE__*/ createComponent<PcmZskChatModalElement, PcmZskChatModalEvents>({
    tagName: 'pcm-zsk-chat-modal',
    elementClass: PcmZskChatModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onTokenInvalid: 'tokenInvalid'
    } as PcmZskChatModalEvents,
    defineCustomElement: definePcmZskChatModal
});

type PcmZyghModalEvents = {
    onModalClosed: EventName<CustomEvent<void>>,
    onUploadSuccess: EventName<PcmZyghModalCustomEvent<FileUploadResponse>>,
    onStreamComplete: EventName<PcmZyghModalCustomEvent<StreamCompleteEventData>>,
    onConversationStart: EventName<PcmZyghModalCustomEvent<ConversationStartEventData>>,
    onPlanningComplete: EventName<PcmZyghModalCustomEvent<{
        conversation_id: string;
        type: CareerPlanType;
    }>>,
    onTokenInvalid: EventName<CustomEvent<void>>
};

export const PcmZyghModal: StencilReactComponent<PcmZyghModalElement, PcmZyghModalEvents> = /*@__PURE__*/ createComponent<PcmZyghModalElement, PcmZyghModalEvents>({
    tagName: 'pcm-zygh-modal',
    elementClass: PcmZyghModalElement,
    // @ts-ignore - React type of Stencil Output Target may differ from the React version used in the Nuxt.js project, this can be ignored.
    react: React,
    events: {
        onModalClosed: 'modalClosed',
        onUploadSuccess: 'uploadSuccess',
        onStreamComplete: 'streamComplete',
        onConversationStart: 'conversationStart',
        onPlanningComplete: 'planningComplete',
        onTokenInvalid: 'tokenInvalid'
    } as PcmZyghModalEvents,
    defineCustomElement: definePcmZyghModal
});
