/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChatMessage } from "./interfaces/chat";
import { FileUploadResponse } from "./utils/utils";
import { CareerPlanType } from "./components/pcm-zygh-modal/pcm-zygh-modal";
export { ChatMessage } from "./interfaces/chat";
export { FileUploadResponse } from "./utils/utils";
export { CareerPlanType } from "./components/pcm-zygh-modal/pcm-zygh-modal";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PcmAppChatModal {
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime": number;
        /**
          * 自定义智能体inputs输入参数
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否显示题干内容 1: 显示题干内容 0: 不显示题干内容
         */
        "displayContentStatus": string;
        /**
          * 是否启用语音播报功能 true: 启用语音合成 false: 禁用语音合成
         */
        "enableTTS": boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice": boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式 video: 视频面试模式 text: 文字面试模式
         */
        "interviewMode": 'video' | 'text';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime": number;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 控制对话轮数
         */
        "totalQuestions": number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmChatMessage {
        /**
          * 消息数据
         */
        "message": ChatMessage;
        /**
          * SDK鉴权密钥
         */
        "token": string;
    }
    interface PcmChatModal {
        /**
          * API鉴权密钥
         */
        "apiKey": string;
        /**
          * 机器人ID
         */
        "botId": string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmHrChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime": number;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否显示题干内容
         */
        "displayContentStatus": boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice": boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime": number;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 是否需要上传简历
         */
        "requireResume": boolean;
        /**
          * 接收报告的邮箱地址
         */
        "toEmail": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 总题目数量
         */
        "totalQuestions": number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 劳动合同卫士
     */
    interface PcmHtwsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入input时，会自动切换到自由输入模式  htwsModal.customInputs = {      input: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；" };
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 会议总结助手
     */
    interface PcmHyzjModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  hyzjModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 职位生成组件
     */
    interface PcmJdModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  jdModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 简历匹配
     */
    interface PcmJlppModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  jlppModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟出题大师
     */
    interface PcmMnctModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  mnctModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  mnmsModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 面试报告
     */
    interface PcmMsbgModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域
         */
        "customInputs": { [key: string]: any };
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmVideoChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime": number;
        /**
          * 首次对话提问文本
         */
        "defaultQuery": string;
        /**
          * 是否显示题干内容 1: 显示题干内容 0: 不显示题干内容
         */
        "displayContentStatus": string;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice": boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime": number;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 父组件传入的 简历id
         */
        "resumeId"?: string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 总题目数量
         */
        "totalQuestions": number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZskChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义智能体inputs输入参数
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 数字员工ID，从聘才猫开发平台创建数字员工后，点击分享SDK获取
         */
        "employeeId": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 是否显示引用文档
         */
        "showReferences": boolean;
        /**
          * 是否显示推荐问题
         */
        "showSuggestedQuestions": boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZyghModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入type则可以指定规划类型，可传入"长期规划"、"转行建议"、"晋升路径"  zyghModal.customInputs = {      type: "转行建议" };
         */
        "customInputs": Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
}
export interface PcmAppChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmAppChatModalElement;
}
export interface PcmChatMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmChatMessageElement;
}
export interface PcmChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmChatModalElement;
}
export interface PcmHrChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmHrChatModalElement;
}
export interface PcmHtwsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmHtwsModalElement;
}
export interface PcmHyzjModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmHyzjModalElement;
}
export interface PcmJdModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmJdModalElement;
}
export interface PcmJlppModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmJlppModalElement;
}
export interface PcmMnctModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMnctModalElement;
}
export interface PcmMnmsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMnmsModalElement;
}
export interface PcmMsbgModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMsbgModalElement;
}
export interface PcmVideoChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmVideoChatModalElement;
}
export interface PcmZskChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmZskChatModalElement;
}
export interface PcmZyghModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmZyghModalElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPcmAppChatModalElementEventMap {
        "modalClosed": void;
        "streamComplete": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
        "conversationStart": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
        "interviewComplete": {
    conversation_id: string;
    total_questions: number;
  };
        "recordingError": {
    type: string;
    message: string;
    details?: any;
  };
        "recordingStatusChange": {
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  };
    }
    interface HTMLPcmAppChatModalElement extends Components.PcmAppChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmAppChatModalElementEventMap>(type: K, listener: (this: HTMLPcmAppChatModalElement, ev: PcmAppChatModalCustomEvent<HTMLPcmAppChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmAppChatModalElementEventMap>(type: K, listener: (this: HTMLPcmAppChatModalElement, ev: PcmAppChatModalCustomEvent<HTMLPcmAppChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmAppChatModalElement: {
        prototype: HTMLPcmAppChatModalElement;
        new (): HTMLPcmAppChatModalElement;
    };
    interface HTMLPcmChatMessageElementEventMap {
        "messageChange": Partial<ChatMessage>;
    }
    interface HTMLPcmChatMessageElement extends Components.PcmChatMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmChatMessageElementEventMap>(type: K, listener: (this: HTMLPcmChatMessageElement, ev: PcmChatMessageCustomEvent<HTMLPcmChatMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmChatMessageElementEventMap>(type: K, listener: (this: HTMLPcmChatMessageElement, ev: PcmChatMessageCustomEvent<HTMLPcmChatMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmChatMessageElement: {
        prototype: HTMLPcmChatMessageElement;
        new (): HTMLPcmChatMessageElement;
    };
    interface HTMLPcmChatModalElementEventMap {
        "messageSent": string;
        "modalClosed": void;
        "streamComplete": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
    }
    interface HTMLPcmChatModalElement extends Components.PcmChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmChatModalElementEventMap>(type: K, listener: (this: HTMLPcmChatModalElement, ev: PcmChatModalCustomEvent<HTMLPcmChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmChatModalElementEventMap>(type: K, listener: (this: HTMLPcmChatModalElement, ev: PcmChatModalCustomEvent<HTMLPcmChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmChatModalElement: {
        prototype: HTMLPcmChatModalElement;
        new (): HTMLPcmChatModalElement;
    };
    interface HTMLPcmHrChatModalElementEventMap {
        "modalClosed": void;
        "streamComplete": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
        "conversationStart": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
        "interviewComplete": {
    conversation_id: string;
    total_questions: number;
  };
        "recordingError": {
    type: string;
    message: string;
    details?: any;
  };
        "recordingStatusChange": {
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  };
    }
    interface HTMLPcmHrChatModalElement extends Components.PcmHrChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmHrChatModalElementEventMap>(type: K, listener: (this: HTMLPcmHrChatModalElement, ev: PcmHrChatModalCustomEvent<HTMLPcmHrChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmHrChatModalElementEventMap>(type: K, listener: (this: HTMLPcmHrChatModalElement, ev: PcmHrChatModalCustomEvent<HTMLPcmHrChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmHrChatModalElement: {
        prototype: HTMLPcmHrChatModalElement;
        new (): HTMLPcmHrChatModalElement;
    };
    interface HTMLPcmHtwsModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "interviewComplete": {
        conversation_id: string;
        total_questions: number;
    };
        "tokenInvalid": void;
    }
    /**
     * 劳动合同卫士
     */
    interface HTMLPcmHtwsModalElement extends Components.PcmHtwsModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmHtwsModalElementEventMap>(type: K, listener: (this: HTMLPcmHtwsModalElement, ev: PcmHtwsModalCustomEvent<HTMLPcmHtwsModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmHtwsModalElementEventMap>(type: K, listener: (this: HTMLPcmHtwsModalElement, ev: PcmHtwsModalCustomEvent<HTMLPcmHtwsModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmHtwsModalElement: {
        prototype: HTMLPcmHtwsModalElement;
        new (): HTMLPcmHtwsModalElement;
    };
    interface HTMLPcmHyzjModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "interviewComplete": {
        conversation_id: string;
        total_questions: number;
    };
        "tokenInvalid": void;
    }
    /**
     * 会议总结助手
     */
    interface HTMLPcmHyzjModalElement extends Components.PcmHyzjModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmHyzjModalElementEventMap>(type: K, listener: (this: HTMLPcmHyzjModalElement, ev: PcmHyzjModalCustomEvent<HTMLPcmHyzjModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmHyzjModalElementEventMap>(type: K, listener: (this: HTMLPcmHyzjModalElement, ev: PcmHyzjModalCustomEvent<HTMLPcmHyzjModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmHyzjModalElement: {
        prototype: HTMLPcmHyzjModalElement;
        new (): HTMLPcmHyzjModalElement;
    };
    interface HTMLPcmJdModalElementEventMap {
        "modalClosed": void;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "interviewComplete": {
        conversation_id: string;
        total_questions: number;
    };
        "tokenInvalid": void;
    }
    /**
     * 职位生成组件
     */
    interface HTMLPcmJdModalElement extends Components.PcmJdModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmJdModalElementEventMap>(type: K, listener: (this: HTMLPcmJdModalElement, ev: PcmJdModalCustomEvent<HTMLPcmJdModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmJdModalElementEventMap>(type: K, listener: (this: HTMLPcmJdModalElement, ev: PcmJdModalCustomEvent<HTMLPcmJdModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmJdModalElement: {
        prototype: HTMLPcmJdModalElement;
        new (): HTMLPcmJdModalElement;
    };
    interface HTMLPcmJlppModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "interviewComplete": {
        conversation_id: string;
        total_questions: number;
    };
        "tokenInvalid": void;
    }
    /**
     * 简历匹配
     */
    interface HTMLPcmJlppModalElement extends Components.PcmJlppModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmJlppModalElementEventMap>(type: K, listener: (this: HTMLPcmJlppModalElement, ev: PcmJlppModalCustomEvent<HTMLPcmJlppModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmJlppModalElementEventMap>(type: K, listener: (this: HTMLPcmJlppModalElement, ev: PcmJlppModalCustomEvent<HTMLPcmJlppModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmJlppModalElement: {
        prototype: HTMLPcmJlppModalElement;
        new (): HTMLPcmJlppModalElement;
    };
    interface HTMLPcmMnctModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "interviewComplete": {
        conversation_id: string;
        total_questions: number;
    };
        "tokenInvalid": void;
    }
    /**
     * 模拟出题大师
     */
    interface HTMLPcmMnctModalElement extends Components.PcmMnctModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMnctModalElementEventMap>(type: K, listener: (this: HTMLPcmMnctModalElement, ev: PcmMnctModalCustomEvent<HTMLPcmMnctModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMnctModalElementEventMap>(type: K, listener: (this: HTMLPcmMnctModalElement, ev: PcmMnctModalCustomEvent<HTMLPcmMnctModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMnctModalElement: {
        prototype: HTMLPcmMnctModalElement;
        new (): HTMLPcmMnctModalElement;
    };
    interface HTMLPcmMnmsModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "interviewComplete": {
        conversation_id: string;
        total_questions: number;
    };
        "tokenInvalid": void;
    }
    /**
     * 模拟面试
     */
    interface HTMLPcmMnmsModalElement extends Components.PcmMnmsModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMnmsModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsModalElement, ev: PcmMnmsModalCustomEvent<HTMLPcmMnmsModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMnmsModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsModalElement, ev: PcmMnmsModalCustomEvent<HTMLPcmMnmsModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMnmsModalElement: {
        prototype: HTMLPcmMnmsModalElement;
        new (): HTMLPcmMnmsModalElement;
    };
    interface HTMLPcmMsbgModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "interviewComplete": {
        conversation_id: string;
        total_questions: number;
    };
        "tokenInvalid": void;
    }
    /**
     * 面试报告
     */
    interface HTMLPcmMsbgModalElement extends Components.PcmMsbgModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMsbgModalElementEventMap>(type: K, listener: (this: HTMLPcmMsbgModalElement, ev: PcmMsbgModalCustomEvent<HTMLPcmMsbgModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMsbgModalElementEventMap>(type: K, listener: (this: HTMLPcmMsbgModalElement, ev: PcmMsbgModalCustomEvent<HTMLPcmMsbgModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMsbgModalElement: {
        prototype: HTMLPcmMsbgModalElement;
        new (): HTMLPcmMsbgModalElement;
    };
    interface HTMLPcmVideoChatModalElementEventMap {
        "modalClosed": void;
        "streamComplete": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
        "interviewComplete": {
    conversation_id: string;
    total_questions: number;
  };
        "recordingError": {
    type: string;
    message: string;
    details?: any;
  };
        "recordingStatusChange": {
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  };
    }
    interface HTMLPcmVideoChatModalElement extends Components.PcmVideoChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmVideoChatModalElementEventMap>(type: K, listener: (this: HTMLPcmVideoChatModalElement, ev: PcmVideoChatModalCustomEvent<HTMLPcmVideoChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmVideoChatModalElementEventMap>(type: K, listener: (this: HTMLPcmVideoChatModalElement, ev: PcmVideoChatModalCustomEvent<HTMLPcmVideoChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmVideoChatModalElement: {
        prototype: HTMLPcmVideoChatModalElement;
        new (): HTMLPcmVideoChatModalElement;
    };
    interface HTMLPcmZskChatModalElementEventMap {
        "modalClosed": void;
        "streamComplete": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
        "conversationStart": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
    }
    interface HTMLPcmZskChatModalElement extends Components.PcmZskChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmZskChatModalElementEventMap>(type: K, listener: (this: HTMLPcmZskChatModalElement, ev: PcmZskChatModalCustomEvent<HTMLPcmZskChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmZskChatModalElementEventMap>(type: K, listener: (this: HTMLPcmZskChatModalElement, ev: PcmZskChatModalCustomEvent<HTMLPcmZskChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmZskChatModalElement: {
        prototype: HTMLPcmZskChatModalElement;
        new (): HTMLPcmZskChatModalElement;
    };
    interface HTMLPcmZyghModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "conversationStart": {
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    };
        "planningComplete": {
        conversation_id: string;
        type: CareerPlanType;
    };
        "tokenInvalid": void;
    }
    interface HTMLPcmZyghModalElement extends Components.PcmZyghModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmZyghModalElementEventMap>(type: K, listener: (this: HTMLPcmZyghModalElement, ev: PcmZyghModalCustomEvent<HTMLPcmZyghModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmZyghModalElementEventMap>(type: K, listener: (this: HTMLPcmZyghModalElement, ev: PcmZyghModalCustomEvent<HTMLPcmZyghModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmZyghModalElement: {
        prototype: HTMLPcmZyghModalElement;
        new (): HTMLPcmZyghModalElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "pcm-app-chat-modal": HTMLPcmAppChatModalElement;
        "pcm-chat-message": HTMLPcmChatMessageElement;
        "pcm-chat-modal": HTMLPcmChatModalElement;
        "pcm-hr-chat-modal": HTMLPcmHrChatModalElement;
        "pcm-htws-modal": HTMLPcmHtwsModalElement;
        "pcm-hyzj-modal": HTMLPcmHyzjModalElement;
        "pcm-jd-modal": HTMLPcmJdModalElement;
        "pcm-jlpp-modal": HTMLPcmJlppModalElement;
        "pcm-mnct-modal": HTMLPcmMnctModalElement;
        "pcm-mnms-modal": HTMLPcmMnmsModalElement;
        "pcm-msbg-modal": HTMLPcmMsbgModalElement;
        "pcm-video-chat-modal": HTMLPcmVideoChatModalElement;
        "pcm-zsk-chat-modal": HTMLPcmZskChatModalElement;
        "pcm-zygh-modal": HTMLPcmZyghModalElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PcmAppChatModal {
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime"?: number;
        /**
          * 自定义智能体inputs输入参数
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否显示题干内容 1: 显示题干内容 0: 不显示题干内容
         */
        "displayContentStatus"?: string;
        /**
          * 是否启用语音播报功能 true: 启用语音合成 false: 禁用语音合成
         */
        "enableTTS"?: boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice"?: boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式 video: 视频面试模式 text: 文字面试模式
         */
        "interviewMode"?: 'video' | 'text';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmAppChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmAppChatModalCustomEvent<{
    conversation_id: string;
    total_questions: number;
  }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmAppChatModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmAppChatModalCustomEvent<{
    type: string;
    message: string;
    details?: any;
  }>) => void;
        /**
          * 录制状态变化事件
         */
        "onRecordingStatusChange"?: (event: PcmAppChatModalCustomEvent<{
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  }>) => void;
        /**
          * 一轮对话结束时的回调
         */
        "onStreamComplete"?: (event: PcmAppChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 控制对话轮数
         */
        "totalQuestions"?: number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmChatMessage {
        /**
          * 消息数据
         */
        "message"?: ChatMessage;
        /**
          * 消息变更事件
         */
        "onMessageChange"?: (event: PcmChatMessageCustomEvent<Partial<ChatMessage>>) => void;
        /**
          * SDK鉴权密钥
         */
        "token"?: string;
    }
    interface PcmChatModal {
        /**
          * API鉴权密钥
         */
        "apiKey"?: string;
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 当发送消息时触发
         */
        "onMessageSent"?: (event: PcmChatModalCustomEvent<string>) => void;
        /**
          * 点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmChatModalCustomEvent<void>) => void;
        "onStreamComplete"?: (event: PcmChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmHrChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime"?: number;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否显示题干内容
         */
        "displayContentStatus"?: boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice"?: boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmHrChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 当面试完成时触发
         */
        "onInterviewComplete"?: (event: PcmHrChatModalCustomEvent<{
    conversation_id: string;
    total_questions: number;
  }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmHrChatModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmHrChatModalCustomEvent<{
    type: string;
    message: string;
    details?: any;
  }>) => void;
        /**
          * 录制状态变化事件
         */
        "onRecordingStatusChange"?: (event: PcmHrChatModalCustomEvent<{
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  }>) => void;
        /**
          * 一轮对话结束时的回调
         */
        "onStreamComplete"?: (event: PcmHrChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 是否需要上传简历
         */
        "requireResume"?: boolean;
        /**
          * 接收报告的邮箱地址
         */
        "toEmail"?: string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 总题目数量
         */
        "totalQuestions"?: number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 劳动合同卫士
     */
    interface PcmHtwsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入input时，会自动切换到自由输入模式  htwsModal.customInputs = {      input: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；" };
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmHtwsModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmHtwsModalCustomEvent<{
        conversation_id: string;
        total_questions: number;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmHtwsModalCustomEvent<void>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmHtwsModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmHtwsModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmHtwsModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 会议总结助手
     */
    interface PcmHyzjModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  hyzjModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmHyzjModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmHyzjModalCustomEvent<{
        conversation_id: string;
        total_questions: number;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmHyzjModalCustomEvent<void>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmHyzjModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmHyzjModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmHyzjModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 职位生成组件
     */
    interface PcmJdModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  jdModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmJdModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmJdModalCustomEvent<{
        conversation_id: string;
        total_questions: number;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmJdModalCustomEvent<void>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmJdModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmJdModalCustomEvent<void>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 简历匹配
     */
    interface PcmJlppModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  jlppModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmJlppModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmJlppModalCustomEvent<{
        conversation_id: string;
        total_questions: number;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmJlppModalCustomEvent<void>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmJlppModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmJlppModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmJlppModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟出题大师
     */
    interface PcmMnctModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  mnctModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMnctModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMnctModalCustomEvent<{
        conversation_id: string;
        total_questions: number;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMnctModalCustomEvent<void>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMnctModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMnctModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMnctModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域  mnmsModal.customInputs = {      job_info: "负责市场营销策略制定与执行；开展市场调研，分析竞争对手情况；策划并执行线上线下营销活动；" };
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMnmsModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMnmsModalCustomEvent<{
        conversation_id: string;
        total_questions: number;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMnmsModalCustomEvent<void>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMnmsModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMnmsModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMnmsModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 面试报告
     */
    interface PcmMsbgModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入job_info时，会隐藏JD输入区域
         */
        "customInputs"?: { [key: string]: any };
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMsbgModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMsbgModalCustomEvent<{
        conversation_id: string;
        total_questions: number;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMsbgModalCustomEvent<void>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMsbgModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMsbgModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMsbgModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmVideoChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime"?: number;
        /**
          * 首次对话提问文本
         */
        "defaultQuery"?: string;
        /**
          * 是否显示题干内容 1: 显示题干内容 0: 不显示题干内容
         */
        "displayContentStatus"?: string;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice"?: boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 当面试完成时触发
         */
        "onInterviewComplete"?: (event: PcmVideoChatModalCustomEvent<{
    conversation_id: string;
    total_questions: number;
  }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmVideoChatModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmVideoChatModalCustomEvent<{
    type: string;
    message: string;
    details?: any;
  }>) => void;
        /**
          * 录制状态变化事件
         */
        "onRecordingStatusChange"?: (event: PcmVideoChatModalCustomEvent<{
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  }>) => void;
        "onStreamComplete"?: (event: PcmVideoChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 父组件传入的 简历id
         */
        "resumeId"?: string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 总题目数量
         */
        "totalQuestions"?: number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZskChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义智能体inputs输入参数
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 数字员工ID，从聘才猫开发平台创建数字员工后，点击分享SDK获取
         */
        "employeeId"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmZskChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmZskChatModalCustomEvent<void>) => void;
        /**
          * 一轮对话结束时的回调
         */
        "onStreamComplete"?: (event: PcmZskChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 是否显示引用文档
         */
        "showReferences"?: boolean;
        /**
          * 是否显示推荐问题
         */
        "showSuggestedQuestions"?: boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZyghModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入type则可以指定规划类型，可传入"长期规划"、"转行建议"、"晋升路径"  zyghModal.customInputs = {      type: "转行建议" };
         */
        "customInputs"?: Record<string, any>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmZyghModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmZyghModalCustomEvent<void>) => void;
        /**
          * 当聊天完成时触发
         */
        "onPlanningComplete"?: (event: PcmZyghModalCustomEvent<{
        conversation_id: string;
        type: CareerPlanType;
    }>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmZyghModalCustomEvent<{
        conversation_id: string;
        event: string;
        message_id: string;
        id: string;
    }>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmZyghModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmZyghModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "pcm-app-chat-modal": PcmAppChatModal;
        "pcm-chat-message": PcmChatMessage;
        "pcm-chat-modal": PcmChatModal;
        "pcm-hr-chat-modal": PcmHrChatModal;
        "pcm-htws-modal": PcmHtwsModal;
        "pcm-hyzj-modal": PcmHyzjModal;
        "pcm-jd-modal": PcmJdModal;
        "pcm-jlpp-modal": PcmJlppModal;
        "pcm-mnct-modal": PcmMnctModal;
        "pcm-mnms-modal": PcmMnmsModal;
        "pcm-msbg-modal": PcmMsbgModal;
        "pcm-video-chat-modal": PcmVideoChatModal;
        "pcm-zsk-chat-modal": PcmZskChatModal;
        "pcm-zygh-modal": PcmZyghModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "pcm-app-chat-modal": LocalJSX.PcmAppChatModal & JSXBase.HTMLAttributes<HTMLPcmAppChatModalElement>;
            "pcm-chat-message": LocalJSX.PcmChatMessage & JSXBase.HTMLAttributes<HTMLPcmChatMessageElement>;
            "pcm-chat-modal": LocalJSX.PcmChatModal & JSXBase.HTMLAttributes<HTMLPcmChatModalElement>;
            "pcm-hr-chat-modal": LocalJSX.PcmHrChatModal & JSXBase.HTMLAttributes<HTMLPcmHrChatModalElement>;
            /**
             * 劳动合同卫士
             */
            "pcm-htws-modal": LocalJSX.PcmHtwsModal & JSXBase.HTMLAttributes<HTMLPcmHtwsModalElement>;
            /**
             * 会议总结助手
             */
            "pcm-hyzj-modal": LocalJSX.PcmHyzjModal & JSXBase.HTMLAttributes<HTMLPcmHyzjModalElement>;
            /**
             * 职位生成组件
             */
            "pcm-jd-modal": LocalJSX.PcmJdModal & JSXBase.HTMLAttributes<HTMLPcmJdModalElement>;
            /**
             * 简历匹配
             */
            "pcm-jlpp-modal": LocalJSX.PcmJlppModal & JSXBase.HTMLAttributes<HTMLPcmJlppModalElement>;
            /**
             * 模拟出题大师
             */
            "pcm-mnct-modal": LocalJSX.PcmMnctModal & JSXBase.HTMLAttributes<HTMLPcmMnctModalElement>;
            /**
             * 模拟面试
             */
            "pcm-mnms-modal": LocalJSX.PcmMnmsModal & JSXBase.HTMLAttributes<HTMLPcmMnmsModalElement>;
            /**
             * 面试报告
             */
            "pcm-msbg-modal": LocalJSX.PcmMsbgModal & JSXBase.HTMLAttributes<HTMLPcmMsbgModalElement>;
            "pcm-video-chat-modal": LocalJSX.PcmVideoChatModal & JSXBase.HTMLAttributes<HTMLPcmVideoChatModalElement>;
            "pcm-zsk-chat-modal": LocalJSX.PcmZskChatModal & JSXBase.HTMLAttributes<HTMLPcmZskChatModalElement>;
            "pcm-zygh-modal": LocalJSX.PcmZyghModal & JSXBase.HTMLAttributes<HTMLPcmZyghModalElement>;
        }
    }
}
