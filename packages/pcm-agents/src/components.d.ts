/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { ChatMessage } from "./interfaces/chat";
export { ChatMessage } from "./interfaces/chat";
export namespace Components {
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
    interface PcmChatMessage {
        /**
          * 消息数据
         */
        "message": ChatMessage;
    }
    interface PcmChatModal {
        /**
          * 机器人ID
         */
        "botId": string;
        /**
          * 会话ID
         */
        "conversationId"?: string;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 聊天框窗口的布局风格
         */
        "layout": 'mobile' | 'pc';
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
}
export interface PcmChatMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmChatMessageElement;
}
export interface PcmChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmChatModalElement;
}
declare global {
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLPcmChatMessageElementEventMap {
        "messageChange": Partial<ChatMessage>;
    }
    interface HTMLPcmChatMessageElement extends Components.PcmChatMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmChatMessageElementEventMap>(type: K, listener: (this: HTMLPcmChatMessageElement, ev: PcmChatMessageCustomEvent<HTMLPcmChatMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmChatMessageElementEventMap>(type: K, listener: (this: HTMLPcmChatMessageElement, ev: PcmChatMessageCustomEvent<HTMLPcmChatMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmChatMessageElement: {
        prototype: HTMLPcmChatMessageElement;
        new (): HTMLPcmChatMessageElement;
    };
    interface HTMLPcmChatModalElementEventMap {
        "messageSent": string;
        "modalClosed": void;
        "streamComplete": {
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  };
    }
    interface HTMLPcmChatModalElement extends Components.PcmChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmChatModalElementEventMap>(type: K, listener: (this: HTMLPcmChatModalElement, ev: PcmChatModalCustomEvent<HTMLPcmChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmChatModalElementEventMap>(type: K, listener: (this: HTMLPcmChatModalElement, ev: PcmChatModalCustomEvent<HTMLPcmChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmChatModalElement: {
        prototype: HTMLPcmChatModalElement;
        new (): HTMLPcmChatModalElement;
    };
    interface HTMLElementTagNameMap {
        "my-component": HTMLMyComponentElement;
        "pcm-chat-message": HTMLPcmChatMessageElement;
        "pcm-chat-modal": HTMLPcmChatModalElement;
    }
}
declare namespace LocalJSX {
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface PcmChatMessage {
        /**
          * 消息数据
         */
        "message"?: ChatMessage;
        /**
          * 消息变更事件
         */
        "onMessageChange"?: (event: PcmChatMessageCustomEvent<Partial<ChatMessage>>) => void;
    }
    interface PcmChatModal {
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 会话ID
         */
        "conversationId"?: string;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 聊天框窗口的布局风格
         */
        "layout"?: 'mobile' | 'pc';
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 当发送消息时触发
         */
        "onMessageSent"?: (event: PcmChatModalCustomEvent<string>) => void;
        /**
          * 当模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmChatModalCustomEvent<void>) => void;
        "onStreamComplete"?: (event: PcmChatModalCustomEvent<{
    conversation_id: string;
    event: string;
    message_id: string;
    id: string;
  }>) => void;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface IntrinsicElements {
        "my-component": MyComponent;
        "pcm-chat-message": PcmChatMessage;
        "pcm-chat-modal": PcmChatModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
            "pcm-chat-message": LocalJSX.PcmChatMessage & JSXBase.HTMLAttributes<HTMLPcmChatMessageElement>;
            "pcm-chat-modal": LocalJSX.PcmChatModal & JSXBase.HTMLAttributes<HTMLPcmChatModalElement>;
        }
    }
}
