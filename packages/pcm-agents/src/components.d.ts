/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { FileUploadResponse } from "./utils/utils";
import { ConversationStartEventData, InterviewCompleteEventData, RecordingErrorEventData, RecordingStatusChangeEventData, StreamCompleteEventData } from "./interfaces/events";
import { ErrorEventDetail } from "./utils/error-event";
import { ChatMessage } from "./interfaces/chat";
import { ConversationStartEventData as ConversationStartEventData1, ErrorEventDetail as ErrorEventDetail1, InterviewCompleteEventData as InterviewCompleteEventData1, StreamCompleteEventData as StreamCompleteEventData1 } from "./components";
import { CareerPlanType } from "./components/pcm-zygh-modal/pcm-zygh-modal";
export { FileUploadResponse } from "./utils/utils";
export { ConversationStartEventData, InterviewCompleteEventData, RecordingErrorEventData, RecordingStatusChangeEventData, StreamCompleteEventData } from "./interfaces/events";
export { ErrorEventDetail } from "./utils/error-event";
export { ChatMessage } from "./interfaces/chat";
export { ConversationStartEventData as ConversationStartEventData1, ErrorEventDetail as ErrorEventDetail1, InterviewCompleteEventData as InterviewCompleteEventData1, StreamCompleteEventData as StreamCompleteEventData1 } from "./components";
export { CareerPlanType } from "./components/pcm-zygh-modal/pcm-zygh-modal";
export namespace Components {
    /**
     * 模拟面试
     */
    interface Pcm1zhanshiMnmsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmAppChatModal {
        /**
          * 助手头像URL
         */
        "assistantAvatar"?: string;
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime": number;
        /**
          * 自定义智能体inputs输入参数
         */
        "customInputs": Record<string, string>;
        /**
          * 默认发送文本
         */
        "defaultQuery": string;
        /**
          * 是否启用语音播报功能 true: 启用语音合成 false: 禁用语音合成
         */
        "enableTTS": boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice": boolean;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式 video: 视频面试模式 text: 文字面试模式
         */
        "interviewMode": 'video' | 'text';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 语音录制最大时长（秒）
         */
        "maxAudioRecordingTime": number;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime": number;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton": boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons": boolean;
        /**
          * SDK鉴权密钥
         */
        "token"?: string;
        /**
          * 用户头像URL
         */
        "userAvatar"?: string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 按钮组件
     * 一个简化版的类似于 ant-design 的按钮组件，支持自定义文字、颜色、圆角等属性
     */
    interface PcmButton {
        /**
          * 自定义按钮背景色
         */
        "backgroundColor": string;
        /**
          * 是否为块级按钮（宽度撑满父元素）
         */
        "block": boolean;
        /**
          * 自定义按钮边框颜色
         */
        "borderColor": string;
        /**
          * 自定义按钮圆角大小（像素）
         */
        "borderRadius": number;
        /**
          * 按钮边框样式 可选值: 'solid', 'dashed', 'dotted', 'none'
         */
        "borderStyle": 'solid' | 'dashed' | 'dotted' | 'none';
        /**
          * 是否为禁用状态
         */
        "disabled": boolean;
        /**
          * 设置按钮的图标 使用图标的URL或者base64字符串
         */
        "icon": string;
        /**
          * 是否为加载状态
         */
        "loading": boolean;
        /**
          * 自定义按钮形状 可选值: 'default', 'circle', 'round'
         */
        "shape": 'default' | 'circle' | 'round';
        /**
          * 按钮尺寸 可选值: 'large', 'middle', 'small'
         */
        "size": 'large' | 'middle' | 'small';
        /**
          * 自定义按钮文字颜色
         */
        "textColor": string;
        /**
          * 按钮类型 可选值: 'primary', 'default', 'dashed', 'text', 'link'
         */
        "type": 'primary' | 'default' | 'dashed' | 'text' | 'link';
        /**
          * 按钮宽度（像素或百分比）
         */
        "width": string;
    }
    /**
     * 智能体卡片组件
     * 用于展示各业务功能入口，点击后根据回调打开对应的模态框
     */
    interface PcmCard {
        /**
          * 自定义作者名称
         */
        "author": string;
        /**
          * 自定义作者头像URL
         */
        "authorAvatarUrl": string;
        /**
          * 智能体ID
         */
        "botId": string;
        /**
          * 自定义卡片标题
         */
        "cardTitle": string;
        /**
          * 自定义右侧标签
         */
        "customChatTag": string;
        /**
          * 自定义卡片描述
         */
        "description": string;
        /**
          * 自定义卡片图标URL
         */
        "iconUrl": string;
        /**
          * 是否显示右侧对话标签
         */
        "showChatTag": boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 自定义立即使用按钮文本
         */
        "useButtonText": string;
    }
    interface PcmChatMessage {
        /**
          * 助手头像URL
         */
        "assistantAvatar"?: string;
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 消息数据
         */
        "message": ChatMessage;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton": boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons": boolean;
        /**
          * 用户头像URL
         */
        "userAvatar"?: string;
    }
    /**
     * 抽屉组件
     * 从屏幕边缘滑出的浮层面板，类似 Ant Design 的 Drawer 组件
     */
    interface PcmDrawer {
        /**
          * 是否显示关闭按钮
         */
        "closable": boolean;
        /**
          * 关闭抽屉
         */
        "close": () => Promise<void>;
        /**
          * 抽屉标题
         */
        "drawerTitle": string;
        /**
          * 高度，在 placement 为 top 或 bottom 时使用
         */
        "height": string;
        /**
          * 抽屉是否可见
         */
        "isOpen": boolean;
        /**
          * 是否显示蒙层
         */
        "mask": boolean;
        /**
          * 点击蒙层是否允许关闭
         */
        "maskClosable": boolean;
        /**
          * 打开抽屉
         */
        "open": () => Promise<void>;
        /**
          * 宽度，可以是像素值或百分比
         */
        "width": string;
    }
    interface PcmHrChatModal {
        /**
          * 回调地址，用于接收报告的通知（toEmail和callbackUrl不能同时为空，举例：https://www.example.com/callback）
         */
        "callbackUrl": string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime": number;
        /**
          * 首次对话提问文本
         */
        "defaultQuery": string;
        /**
          * 是否显示题干内容
         */
        "displayContentStatus": boolean;
        /**
          * 是否启用音频播放功能（包括自动播放和手动播放）
         */
        "enableAudio": boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice": boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime": number;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 是否需要上传简历
         */
        "requireResume": boolean;
        /**
          * 接收报告的邮箱地址（toEmail和callbackUrl不能同时为空）
         */
        "toEmail": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 总题目数量
         */
        "totalQuestions": number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 劳动合同卫士
     */
    interface PcmHtwsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.input时，会自动切换到自由输入模式<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 会议总结助手
     */
    interface PcmHyzjModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数<br> 传入customInputs.file_url时，会直接开始聊天。<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 职位生成组件
     */
    interface PcmJdModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 简历匹配
     */
    interface PcmJlppModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmJlsxModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmMessage {
        "close": () => Promise<void>;
        "content": string;
        "duration": number;
        "show": () => Promise<void>;
        "type": 'success' | 'error' | 'info' | 'warning';
    }
    /**
     * 模拟出题大师
     */
    interface PcmMnctModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域。<br> 传入customInputs.file_url或customInputs.resume_content时，会隐藏简历上传区域。<br> 传入customInputs.file_url（或customInputs.resume_content）和customInputs.job_info时，会直接开始聊天。<br> customInputs.resume_content：可传入json字符串，或纯文本字符串，字符串内容为简历内容。<br> customInputs.url_callback：可传入url字符串，当报告生成后，会调用该url进行回调。该url请使用post请求，接收报告字段为report_content，会话id字段为conversation_id。
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式：text - 文本模式，video - 视频模式
         */
        "interviewMode": 'text' | 'video';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton": boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons": boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsVideoModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域。<br> 传入customInputs.file_url或customInputs.resume_content时，会隐藏简历上传区域。<br> 传入customInputs.file_url（或customInputs.resume_content）和customInputs.job_info时，会直接开始聊天。<br> customInputs.resume_content：可传入json字符串，或纯文本字符串，字符串内容为简历内容。<br> customInputs.url_callback：可传入url字符串，当报告生成后，会调用该url进行回调。该url请使用post请求，接收报告字段为report_content，会话id字段为conversation_id。
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton": boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons": boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsZpModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域。<br> 传入customInputs.file_url或customInputs.resume_content时，会隐藏简历上传区域。<br> 传入customInputs.file_url（或customInputs.resume_content）和customInputs.job_info时，会直接开始聊天。<br> customInputs.resume_content：可传入json字符串，或纯文本字符串，字符串内容为简历内容。<br> customInputs.url_callback：可传入url字符串，当报告生成后，会调用该url进行回调。该url请使用post请求，接收报告字段为report_content，会话id字段为conversation_id。
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式：text - 文本模式，video - 视频模式
         */
        "interviewMode": 'text' | 'video';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton": boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons": boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 面试报告
     */
    interface PcmMsbgModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_urls时，会隐藏简历上传区域。<br> 传入customInputs.file_urls和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 千岗千简历
     */
    interface PcmQgqjlModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZskChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义智能体inputs输入参数:<br> 1. show_suggested_questions: 是否显示推荐问题<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 数字员工ID，从聘才猫开发平台创建数字员工后，点击导出获取
         */
        "employeeId": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL，如果未设置则使用智能体头像
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 语音录制最大时长（秒）
         */
        "maxAudioRecordingTime": number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZyghModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.type则可以指定规划类型，可传入"长期规划"、"转行建议"、"晋升路径"<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs": Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery": string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode": 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen": boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose": boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen": boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader": boolean;
        /**
          * 模态框标题
         */
        "modalTitle": string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
}
export interface Pcm1zhanshiMnmsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcm1zhanshiMnmsModalElement;
}
export interface PcmAppChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmAppChatModalElement;
}
export interface PcmCardCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmCardElement;
}
export interface PcmChatMessageCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmChatMessageElement;
}
export interface PcmDrawerCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmDrawerElement;
}
export interface PcmHrChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmHrChatModalElement;
}
export interface PcmHtwsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmHtwsModalElement;
}
export interface PcmHyzjModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmHyzjModalElement;
}
export interface PcmJdModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmJdModalElement;
}
export interface PcmJlppModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmJlppModalElement;
}
export interface PcmJlsxModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmJlsxModalElement;
}
export interface PcmMnctModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMnctModalElement;
}
export interface PcmMnmsModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMnmsModalElement;
}
export interface PcmMnmsVideoModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMnmsVideoModalElement;
}
export interface PcmMnmsZpModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMnmsZpModalElement;
}
export interface PcmMsbgModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmMsbgModalElement;
}
export interface PcmQgqjlModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmQgqjlModalElement;
}
export interface PcmZskChatModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmZskChatModalElement;
}
export interface PcmZyghModalCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLPcmZyghModalElement;
}
declare global {
    interface HTMLPcm1zhanshiMnmsModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData;
        "conversationStart": ConversationStartEventData;
        "interviewComplete": InterviewCompleteEventData;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
        "recordingError": RecordingErrorEventData;
    }
    /**
     * 模拟面试
     */
    interface HTMLPcm1zhanshiMnmsModalElement extends Components.Pcm1zhanshiMnmsModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcm1zhanshiMnmsModalElementEventMap>(type: K, listener: (this: HTMLPcm1zhanshiMnmsModalElement, ev: Pcm1zhanshiMnmsModalCustomEvent<HTMLPcm1zhanshiMnmsModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcm1zhanshiMnmsModalElementEventMap>(type: K, listener: (this: HTMLPcm1zhanshiMnmsModalElement, ev: Pcm1zhanshiMnmsModalCustomEvent<HTMLPcm1zhanshiMnmsModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcm1zhanshiMnmsModalElement: {
        prototype: HTMLPcm1zhanshiMnmsModalElement;
        new (): HTMLPcm1zhanshiMnmsModalElement;
    };
    interface HTMLPcmAppChatModalElementEventMap {
        "modalClosed": void;
        "streamComplete": StreamCompleteEventData;
        "conversationStart": ConversationStartEventData;
        "interviewComplete": InterviewCompleteEventData;
        "recordingError": RecordingErrorEventData;
        "recordingStatusChange": RecordingStatusChangeEventData;
        "tokenInvalid": void;
    }
    interface HTMLPcmAppChatModalElement extends Components.PcmAppChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmAppChatModalElementEventMap>(type: K, listener: (this: HTMLPcmAppChatModalElement, ev: PcmAppChatModalCustomEvent<HTMLPcmAppChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmAppChatModalElementEventMap>(type: K, listener: (this: HTMLPcmAppChatModalElement, ev: PcmAppChatModalCustomEvent<HTMLPcmAppChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmAppChatModalElement: {
        prototype: HTMLPcmAppChatModalElement;
        new (): HTMLPcmAppChatModalElement;
    };
    /**
     * 按钮组件
     * 一个简化版的类似于 ant-design 的按钮组件，支持自定义文字、颜色、圆角等属性
     */
    interface HTMLPcmButtonElement extends Components.PcmButton, HTMLStencilElement {
    }
    var HTMLPcmButtonElement: {
        prototype: HTMLPcmButtonElement;
        new (): HTMLPcmButtonElement;
    };
    interface HTMLPcmCardElementEventMap {
        "tokenInvalid": void;
    }
    /**
     * 智能体卡片组件
     * 用于展示各业务功能入口，点击后根据回调打开对应的模态框
     */
    interface HTMLPcmCardElement extends Components.PcmCard, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmCardElementEventMap>(type: K, listener: (this: HTMLPcmCardElement, ev: PcmCardCustomEvent<HTMLPcmCardElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmCardElementEventMap>(type: K, listener: (this: HTMLPcmCardElement, ev: PcmCardCustomEvent<HTMLPcmCardElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmCardElement: {
        prototype: HTMLPcmCardElement;
        new (): HTMLPcmCardElement;
    };
    interface HTMLPcmChatMessageElementEventMap {
        "messageChange": Partial<ChatMessage>;
        "filePreviewRequest": {
        url?: string,
        fileName: string,
        content?: string,
        contentType: 'file' | 'markdown' | 'text'
    };
        "retryRequest": string;
    }
    interface HTMLPcmChatMessageElement extends Components.PcmChatMessage, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmChatMessageElementEventMap>(type: K, listener: (this: HTMLPcmChatMessageElement, ev: PcmChatMessageCustomEvent<HTMLPcmChatMessageElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmChatMessageElementEventMap>(type: K, listener: (this: HTMLPcmChatMessageElement, ev: PcmChatMessageCustomEvent<HTMLPcmChatMessageElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmChatMessageElement: {
        prototype: HTMLPcmChatMessageElement;
        new (): HTMLPcmChatMessageElement;
    };
    interface HTMLPcmDrawerElementEventMap {
        "closed": void;
        "afterOpen": void;
        "afterClose": void;
    }
    /**
     * 抽屉组件
     * 从屏幕边缘滑出的浮层面板，类似 Ant Design 的 Drawer 组件
     */
    interface HTMLPcmDrawerElement extends Components.PcmDrawer, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmDrawerElementEventMap>(type: K, listener: (this: HTMLPcmDrawerElement, ev: PcmDrawerCustomEvent<HTMLPcmDrawerElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmDrawerElementEventMap>(type: K, listener: (this: HTMLPcmDrawerElement, ev: PcmDrawerCustomEvent<HTMLPcmDrawerElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmDrawerElement: {
        prototype: HTMLPcmDrawerElement;
        new (): HTMLPcmDrawerElement;
    };
    interface HTMLPcmHrChatModalElementEventMap {
        "modalClosed": void;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "someErrorEvent": ErrorEventDetail1;
        "interviewComplete": InterviewCompleteEventData1;
        "recordingError": {
    type: string;
    message: string;
    details?: any;
  };
        "recordingStatusChange": {
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  };
        "tokenInvalid": void;
    }
    interface HTMLPcmHrChatModalElement extends Components.PcmHrChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmHrChatModalElementEventMap>(type: K, listener: (this: HTMLPcmHrChatModalElement, ev: PcmHrChatModalCustomEvent<HTMLPcmHrChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmHrChatModalElementEventMap>(type: K, listener: (this: HTMLPcmHrChatModalElement, ev: PcmHrChatModalCustomEvent<HTMLPcmHrChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmHrChatModalElement: {
        prototype: HTMLPcmHrChatModalElement;
        new (): HTMLPcmHrChatModalElement;
    };
    interface HTMLPcmHtwsModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
    }
    /**
     * 劳动合同卫士
     */
    interface HTMLPcmHtwsModalElement extends Components.PcmHtwsModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmHtwsModalElementEventMap>(type: K, listener: (this: HTMLPcmHtwsModalElement, ev: PcmHtwsModalCustomEvent<HTMLPcmHtwsModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmHtwsModalElementEventMap>(type: K, listener: (this: HTMLPcmHtwsModalElement, ev: PcmHtwsModalCustomEvent<HTMLPcmHtwsModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmHtwsModalElement: {
        prototype: HTMLPcmHtwsModalElement;
        new (): HTMLPcmHtwsModalElement;
    };
    interface HTMLPcmHyzjModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
    }
    /**
     * 会议总结助手
     */
    interface HTMLPcmHyzjModalElement extends Components.PcmHyzjModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmHyzjModalElementEventMap>(type: K, listener: (this: HTMLPcmHyzjModalElement, ev: PcmHyzjModalCustomEvent<HTMLPcmHyzjModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmHyzjModalElementEventMap>(type: K, listener: (this: HTMLPcmHyzjModalElement, ev: PcmHyzjModalCustomEvent<HTMLPcmHyzjModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmHyzjModalElement: {
        prototype: HTMLPcmHyzjModalElement;
        new (): HTMLPcmHyzjModalElement;
    };
    interface HTMLPcmJdModalElementEventMap {
        "modalClosed": void;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
    }
    /**
     * 职位生成组件
     */
    interface HTMLPcmJdModalElement extends Components.PcmJdModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmJdModalElementEventMap>(type: K, listener: (this: HTMLPcmJdModalElement, ev: PcmJdModalCustomEvent<HTMLPcmJdModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmJdModalElementEventMap>(type: K, listener: (this: HTMLPcmJdModalElement, ev: PcmJdModalCustomEvent<HTMLPcmJdModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmJdModalElement: {
        prototype: HTMLPcmJdModalElement;
        new (): HTMLPcmJdModalElement;
    };
    interface HTMLPcmJlppModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail1;
    }
    /**
     * 简历匹配
     */
    interface HTMLPcmJlppModalElement extends Components.PcmJlppModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmJlppModalElementEventMap>(type: K, listener: (this: HTMLPcmJlppModalElement, ev: PcmJlppModalCustomEvent<HTMLPcmJlppModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmJlppModalElementEventMap>(type: K, listener: (this: HTMLPcmJlppModalElement, ev: PcmJlppModalCustomEvent<HTMLPcmJlppModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmJlppModalElement: {
        prototype: HTMLPcmJlppModalElement;
        new (): HTMLPcmJlppModalElement;
    };
    interface HTMLPcmJlsxModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail1;
    }
    interface HTMLPcmJlsxModalElement extends Components.PcmJlsxModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmJlsxModalElementEventMap>(type: K, listener: (this: HTMLPcmJlsxModalElement, ev: PcmJlsxModalCustomEvent<HTMLPcmJlsxModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmJlsxModalElementEventMap>(type: K, listener: (this: HTMLPcmJlsxModalElement, ev: PcmJlsxModalCustomEvent<HTMLPcmJlsxModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmJlsxModalElement: {
        prototype: HTMLPcmJlsxModalElement;
        new (): HTMLPcmJlsxModalElement;
    };
    interface HTMLPcmMessageElement extends Components.PcmMessage, HTMLStencilElement {
    }
    var HTMLPcmMessageElement: {
        prototype: HTMLPcmMessageElement;
        new (): HTMLPcmMessageElement;
    };
    interface HTMLPcmMnctModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
    }
    /**
     * 模拟出题大师
     */
    interface HTMLPcmMnctModalElement extends Components.PcmMnctModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMnctModalElementEventMap>(type: K, listener: (this: HTMLPcmMnctModalElement, ev: PcmMnctModalCustomEvent<HTMLPcmMnctModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMnctModalElementEventMap>(type: K, listener: (this: HTMLPcmMnctModalElement, ev: PcmMnctModalCustomEvent<HTMLPcmMnctModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMnctModalElement: {
        prototype: HTMLPcmMnctModalElement;
        new (): HTMLPcmMnctModalElement;
    };
    interface HTMLPcmMnmsModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData;
        "conversationStart": ConversationStartEventData;
        "interviewComplete": InterviewCompleteEventData;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
        "recordingError": RecordingErrorEventData;
    }
    /**
     * 模拟面试
     */
    interface HTMLPcmMnmsModalElement extends Components.PcmMnmsModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMnmsModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsModalElement, ev: PcmMnmsModalCustomEvent<HTMLPcmMnmsModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMnmsModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsModalElement, ev: PcmMnmsModalCustomEvent<HTMLPcmMnmsModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMnmsModalElement: {
        prototype: HTMLPcmMnmsModalElement;
        new (): HTMLPcmMnmsModalElement;
    };
    interface HTMLPcmMnmsVideoModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData;
        "conversationStart": ConversationStartEventData;
        "interviewComplete": InterviewCompleteEventData;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
        "recordingError": RecordingErrorEventData;
    }
    /**
     * 模拟面试
     */
    interface HTMLPcmMnmsVideoModalElement extends Components.PcmMnmsVideoModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMnmsVideoModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsVideoModalElement, ev: PcmMnmsVideoModalCustomEvent<HTMLPcmMnmsVideoModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMnmsVideoModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsVideoModalElement, ev: PcmMnmsVideoModalCustomEvent<HTMLPcmMnmsVideoModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMnmsVideoModalElement: {
        prototype: HTMLPcmMnmsVideoModalElement;
        new (): HTMLPcmMnmsVideoModalElement;
    };
    interface HTMLPcmMnmsZpModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData;
        "conversationStart": ConversationStartEventData;
        "interviewComplete": InterviewCompleteEventData;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
        "recordingError": RecordingErrorEventData;
    }
    /**
     * 模拟面试
     */
    interface HTMLPcmMnmsZpModalElement extends Components.PcmMnmsZpModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMnmsZpModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsZpModalElement, ev: PcmMnmsZpModalCustomEvent<HTMLPcmMnmsZpModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMnmsZpModalElementEventMap>(type: K, listener: (this: HTMLPcmMnmsZpModalElement, ev: PcmMnmsZpModalCustomEvent<HTMLPcmMnmsZpModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMnmsZpModalElement: {
        prototype: HTMLPcmMnmsZpModalElement;
        new (): HTMLPcmMnmsZpModalElement;
    };
    interface HTMLPcmMsbgModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail1;
    }
    /**
     * 面试报告
     */
    interface HTMLPcmMsbgModalElement extends Components.PcmMsbgModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmMsbgModalElementEventMap>(type: K, listener: (this: HTMLPcmMsbgModalElement, ev: PcmMsbgModalCustomEvent<HTMLPcmMsbgModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmMsbgModalElementEventMap>(type: K, listener: (this: HTMLPcmMsbgModalElement, ev: PcmMsbgModalCustomEvent<HTMLPcmMsbgModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmMsbgModalElement: {
        prototype: HTMLPcmMsbgModalElement;
        new (): HTMLPcmMsbgModalElement;
    };
    interface HTMLPcmQgqjlModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "interviewComplete": InterviewCompleteEventData1;
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
    }
    /**
     * 千岗千简历
     */
    interface HTMLPcmQgqjlModalElement extends Components.PcmQgqjlModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmQgqjlModalElementEventMap>(type: K, listener: (this: HTMLPcmQgqjlModalElement, ev: PcmQgqjlModalCustomEvent<HTMLPcmQgqjlModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmQgqjlModalElementEventMap>(type: K, listener: (this: HTMLPcmQgqjlModalElement, ev: PcmQgqjlModalCustomEvent<HTMLPcmQgqjlModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmQgqjlModalElement: {
        prototype: HTMLPcmQgqjlModalElement;
        new (): HTMLPcmQgqjlModalElement;
    };
    interface HTMLPcmZskChatModalElementEventMap {
        "modalClosed": void;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "tokenInvalid": void;
        "clearConversation": string;
    }
    interface HTMLPcmZskChatModalElement extends Components.PcmZskChatModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmZskChatModalElementEventMap>(type: K, listener: (this: HTMLPcmZskChatModalElement, ev: PcmZskChatModalCustomEvent<HTMLPcmZskChatModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmZskChatModalElementEventMap>(type: K, listener: (this: HTMLPcmZskChatModalElement, ev: PcmZskChatModalCustomEvent<HTMLPcmZskChatModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmZskChatModalElement: {
        prototype: HTMLPcmZskChatModalElement;
        new (): HTMLPcmZskChatModalElement;
    };
    interface HTMLPcmZyghModalElementEventMap {
        "modalClosed": void;
        "uploadSuccess": FileUploadResponse;
        "streamComplete": StreamCompleteEventData1;
        "conversationStart": ConversationStartEventData1;
        "planningComplete": {
        conversation_id: string;
        type: CareerPlanType;
    };
        "tokenInvalid": void;
        "someErrorEvent": ErrorEventDetail;
    }
    interface HTMLPcmZyghModalElement extends Components.PcmZyghModal, HTMLStencilElement {
        addEventListener<K extends keyof HTMLPcmZyghModalElementEventMap>(type: K, listener: (this: HTMLPcmZyghModalElement, ev: PcmZyghModalCustomEvent<HTMLPcmZyghModalElementEventMap[K]>) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | AddEventListenerOptions): void;
        addEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | AddEventListenerOptions): void;
        removeEventListener<K extends keyof HTMLPcmZyghModalElementEventMap>(type: K, listener: (this: HTMLPcmZyghModalElement, ev: PcmZyghModalCustomEvent<HTMLPcmZyghModalElementEventMap[K]>) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof DocumentEventMap>(type: K, listener: (this: Document, ev: DocumentEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener<K extends keyof HTMLElementEventMap>(type: K, listener: (this: HTMLElement, ev: HTMLElementEventMap[K]) => any, options?: boolean | EventListenerOptions): void;
        removeEventListener(type: string, listener: EventListenerOrEventListenerObject, options?: boolean | EventListenerOptions): void;
    }
    var HTMLPcmZyghModalElement: {
        prototype: HTMLPcmZyghModalElement;
        new (): HTMLPcmZyghModalElement;
    };
    interface HTMLElementTagNameMap {
        "pcm-1zhanshi-mnms-modal": HTMLPcm1zhanshiMnmsModalElement;
        "pcm-app-chat-modal": HTMLPcmAppChatModalElement;
        "pcm-button": HTMLPcmButtonElement;
        "pcm-card": HTMLPcmCardElement;
        "pcm-chat-message": HTMLPcmChatMessageElement;
        "pcm-drawer": HTMLPcmDrawerElement;
        "pcm-hr-chat-modal": HTMLPcmHrChatModalElement;
        "pcm-htws-modal": HTMLPcmHtwsModalElement;
        "pcm-hyzj-modal": HTMLPcmHyzjModalElement;
        "pcm-jd-modal": HTMLPcmJdModalElement;
        "pcm-jlpp-modal": HTMLPcmJlppModalElement;
        "pcm-jlsx-modal": HTMLPcmJlsxModalElement;
        "pcm-message": HTMLPcmMessageElement;
        "pcm-mnct-modal": HTMLPcmMnctModalElement;
        "pcm-mnms-modal": HTMLPcmMnmsModalElement;
        "pcm-mnms-video-modal": HTMLPcmMnmsVideoModalElement;
        "pcm-mnms-zp-modal": HTMLPcmMnmsZpModalElement;
        "pcm-msbg-modal": HTMLPcmMsbgModalElement;
        "pcm-qgqjl-modal": HTMLPcmQgqjlModalElement;
        "pcm-zsk-chat-modal": HTMLPcmZskChatModalElement;
        "pcm-zygh-modal": HTMLPcmZyghModalElement;
    }
}
declare namespace LocalJSX {
    /**
     * 模拟面试
     */
    interface Pcm1zhanshiMnmsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: Pcm1zhanshiMnmsModalCustomEvent<ConversationStartEventData>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: Pcm1zhanshiMnmsModalCustomEvent<InterviewCompleteEventData>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: Pcm1zhanshiMnmsModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: Pcm1zhanshiMnmsModalCustomEvent<RecordingErrorEventData>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: Pcm1zhanshiMnmsModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: Pcm1zhanshiMnmsModalCustomEvent<StreamCompleteEventData>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: Pcm1zhanshiMnmsModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: Pcm1zhanshiMnmsModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmAppChatModal {
        /**
          * 助手头像URL
         */
        "assistantAvatar"?: string;
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime"?: number;
        /**
          * 自定义智能体inputs输入参数
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认发送文本
         */
        "defaultQuery"?: string;
        /**
          * 是否启用语音播报功能 true: 启用语音合成 false: 禁用语音合成
         */
        "enableTTS"?: boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice"?: boolean;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式 video: 视频面试模式 text: 文字面试模式
         */
        "interviewMode"?: 'video' | 'text';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 语音录制最大时长（秒）
         */
        "maxAudioRecordingTime"?: number;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmAppChatModalCustomEvent<ConversationStartEventData>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmAppChatModalCustomEvent<InterviewCompleteEventData>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmAppChatModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmAppChatModalCustomEvent<RecordingErrorEventData>) => void;
        /**
          * 录制状态变化事件
         */
        "onRecordingStatusChange"?: (event: PcmAppChatModalCustomEvent<RecordingStatusChangeEventData>) => void;
        /**
          * 一轮对话结束时的回调
         */
        "onStreamComplete"?: (event: PcmAppChatModalCustomEvent<StreamCompleteEventData>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmAppChatModalCustomEvent<void>) => void;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton"?: boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons"?: boolean;
        /**
          * SDK鉴权密钥
         */
        "token"?: string;
        /**
          * 用户头像URL
         */
        "userAvatar"?: string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 按钮组件
     * 一个简化版的类似于 ant-design 的按钮组件，支持自定义文字、颜色、圆角等属性
     */
    interface PcmButton {
        /**
          * 自定义按钮背景色
         */
        "backgroundColor"?: string;
        /**
          * 是否为块级按钮（宽度撑满父元素）
         */
        "block"?: boolean;
        /**
          * 自定义按钮边框颜色
         */
        "borderColor"?: string;
        /**
          * 自定义按钮圆角大小（像素）
         */
        "borderRadius"?: number;
        /**
          * 按钮边框样式 可选值: 'solid', 'dashed', 'dotted', 'none'
         */
        "borderStyle"?: 'solid' | 'dashed' | 'dotted' | 'none';
        /**
          * 是否为禁用状态
         */
        "disabled"?: boolean;
        /**
          * 设置按钮的图标 使用图标的URL或者base64字符串
         */
        "icon"?: string;
        /**
          * 是否为加载状态
         */
        "loading"?: boolean;
        /**
          * 自定义按钮形状 可选值: 'default', 'circle', 'round'
         */
        "shape"?: 'default' | 'circle' | 'round';
        /**
          * 按钮尺寸 可选值: 'large', 'middle', 'small'
         */
        "size"?: 'large' | 'middle' | 'small';
        /**
          * 自定义按钮文字颜色
         */
        "textColor"?: string;
        /**
          * 按钮类型 可选值: 'primary', 'default', 'dashed', 'text', 'link'
         */
        "type"?: 'primary' | 'default' | 'dashed' | 'text' | 'link';
        /**
          * 按钮宽度（像素或百分比）
         */
        "width"?: string;
    }
    /**
     * 智能体卡片组件
     * 用于展示各业务功能入口，点击后根据回调打开对应的模态框
     */
    interface PcmCard {
        /**
          * 自定义作者名称
         */
        "author"?: string;
        /**
          * 自定义作者头像URL
         */
        "authorAvatarUrl"?: string;
        /**
          * 智能体ID
         */
        "botId"?: string;
        /**
          * 自定义卡片标题
         */
        "cardTitle"?: string;
        /**
          * 自定义右侧标签
         */
        "customChatTag"?: string;
        /**
          * 自定义卡片描述
         */
        "description"?: string;
        /**
          * 自定义卡片图标URL
         */
        "iconUrl"?: string;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmCardCustomEvent<void>) => void;
        /**
          * 是否显示右侧对话标签
         */
        "showChatTag"?: boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 自定义立即使用按钮文本
         */
        "useButtonText"?: string;
    }
    interface PcmChatMessage {
        /**
          * 助手头像URL
         */
        "assistantAvatar"?: string;
        /**
          * 机器人ID
         */
        "botId"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 消息数据
         */
        "message"?: ChatMessage;
        "onFilePreviewRequest"?: (event: PcmChatMessageCustomEvent<{
        url?: string,
        fileName: string,
        content?: string,
        contentType: 'file' | 'markdown' | 'text'
    }>) => void;
        /**
          * 消息变更事件
         */
        "onMessageChange"?: (event: PcmChatMessageCustomEvent<Partial<ChatMessage>>) => void;
        /**
          * 重试事件
         */
        "onRetryRequest"?: (event: PcmChatMessageCustomEvent<string>) => void;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton"?: boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons"?: boolean;
        /**
          * 用户头像URL
         */
        "userAvatar"?: string;
    }
    /**
     * 抽屉组件
     * 从屏幕边缘滑出的浮层面板，类似 Ant Design 的 Drawer 组件
     */
    interface PcmDrawer {
        /**
          * 是否显示关闭按钮
         */
        "closable"?: boolean;
        /**
          * 抽屉标题
         */
        "drawerTitle"?: string;
        /**
          * 高度，在 placement 为 top 或 bottom 时使用
         */
        "height"?: string;
        /**
          * 抽屉是否可见
         */
        "isOpen"?: boolean;
        /**
          * 是否显示蒙层
         */
        "mask"?: boolean;
        /**
          * 点击蒙层是否允许关闭
         */
        "maskClosable"?: boolean;
        /**
          * 抽屉关闭后的回调
         */
        "onAfterClose"?: (event: PcmDrawerCustomEvent<void>) => void;
        /**
          * 抽屉打开后的回调
         */
        "onAfterOpen"?: (event: PcmDrawerCustomEvent<void>) => void;
        /**
          * 抽屉关闭后的回调
         */
        "onClosed"?: (event: PcmDrawerCustomEvent<void>) => void;
        /**
          * 宽度，可以是像素值或百分比
         */
        "width"?: string;
    }
    interface PcmHrChatModal {
        /**
          * 回调地址，用于接收报告的通知（toEmail和callbackUrl不能同时为空，举例：https://www.example.com/callback）
         */
        "callbackUrl"?: string;
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 录制倒计时提醒时间（秒） 当剩余时间小于此值时，显示倒计时警告
         */
        "countdownWarningTime"?: number;
        /**
          * 首次对话提问文本
         */
        "defaultQuery"?: string;
        /**
          * 是否显示题干内容
         */
        "displayContentStatus"?: boolean;
        /**
          * 是否启用音频播放功能（包括自动播放和手动播放）
         */
        "enableAudio"?: boolean;
        /**
          * 是否自动播放语音问题
         */
        "enableVoice"?: boolean;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 视频录制最大时长（秒）
         */
        "maxRecordingTime"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmHrChatModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当面试完成时触发
         */
        "onInterviewComplete"?: (event: PcmHrChatModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmHrChatModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmHrChatModalCustomEvent<{
    type: string;
    message: string;
    details?: any;
  }>) => void;
        /**
          * 录制状态变化事件
         */
        "onRecordingStatusChange"?: (event: PcmHrChatModalCustomEvent<{
    status: 'started' | 'stopped' | 'paused' | 'resumed' | 'failed';
    details?: any;
  }>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmHrChatModalCustomEvent<ErrorEventDetail1>) => void;
        /**
          * 一轮对话结束时的回调
         */
        "onStreamComplete"?: (event: PcmHrChatModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmHrChatModalCustomEvent<void>) => void;
        /**
          * 是否需要上传简历
         */
        "requireResume"?: boolean;
        /**
          * 接收报告的邮箱地址（toEmail和callbackUrl不能同时为空）
         */
        "toEmail"?: string;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 总题目数量
         */
        "totalQuestions"?: number;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 劳动合同卫士
     */
    interface PcmHtwsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.input时，会自动切换到自由输入模式<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmHtwsModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmHtwsModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmHtwsModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmHtwsModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmHtwsModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmHtwsModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmHtwsModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 会议总结助手
     */
    interface PcmHyzjModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数<br> 传入customInputs.file_url时，会直接开始聊天。<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmHyzjModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmHyzjModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmHyzjModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmHyzjModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmHyzjModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmHyzjModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmHyzjModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 职位生成组件
     */
    interface PcmJdModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmJdModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmJdModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmJdModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmJdModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmJdModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmJdModalCustomEvent<void>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 简历匹配
     */
    interface PcmJlppModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmJlppModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmJlppModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmJlppModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmJlppModalCustomEvent<ErrorEventDetail1>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmJlppModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmJlppModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmJlppModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmJlsxModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmJlsxModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmJlsxModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmJlsxModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmJlsxModalCustomEvent<ErrorEventDetail1>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmJlsxModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmJlsxModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmJlsxModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmMessage {
        "content"?: string;
        "duration"?: number;
        "type"?: 'success' | 'error' | 'info' | 'warning';
    }
    /**
     * 模拟出题大师
     */
    interface PcmMnctModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMnctModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMnctModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMnctModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmMnctModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMnctModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMnctModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMnctModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域。<br> 传入customInputs.file_url或customInputs.resume_content时，会隐藏简历上传区域。<br> 传入customInputs.file_url（或customInputs.resume_content）和customInputs.job_info时，会直接开始聊天。<br> customInputs.resume_content：可传入json字符串，或纯文本字符串，字符串内容为简历内容。<br> customInputs.url_callback：可传入url字符串，当报告生成后，会调用该url进行回调。该url请使用post请求，接收报告字段为report_content，会话id字段为conversation_id。
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式：text - 文本模式，video - 视频模式
         */
        "interviewMode"?: 'text' | 'video';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMnmsModalCustomEvent<ConversationStartEventData>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMnmsModalCustomEvent<InterviewCompleteEventData>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMnmsModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmMnmsModalCustomEvent<RecordingErrorEventData>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmMnmsModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMnmsModalCustomEvent<StreamCompleteEventData>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMnmsModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMnmsModalCustomEvent<FileUploadResponse>) => void;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton"?: boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons"?: boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsVideoModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域。<br> 传入customInputs.file_url或customInputs.resume_content时，会隐藏简历上传区域。<br> 传入customInputs.file_url（或customInputs.resume_content）和customInputs.job_info时，会直接开始聊天。<br> customInputs.resume_content：可传入json字符串，或纯文本字符串，字符串内容为简历内容。<br> customInputs.url_callback：可传入url字符串，当报告生成后，会调用该url进行回调。该url请使用post请求，接收报告字段为report_content，会话id字段为conversation_id。
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMnmsVideoModalCustomEvent<ConversationStartEventData>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMnmsVideoModalCustomEvent<InterviewCompleteEventData>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMnmsVideoModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmMnmsVideoModalCustomEvent<RecordingErrorEventData>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmMnmsVideoModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMnmsVideoModalCustomEvent<StreamCompleteEventData>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMnmsVideoModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMnmsVideoModalCustomEvent<FileUploadResponse>) => void;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton"?: boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons"?: boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 模拟面试
     */
    interface PcmMnmsZpModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域。<br> 传入customInputs.file_url或customInputs.resume_content时，会隐藏简历上传区域。<br> 传入customInputs.file_url（或customInputs.resume_content）和customInputs.job_info时，会直接开始聊天。<br> customInputs.resume_content：可传入json字符串，或纯文本字符串，字符串内容为简历内容。<br> customInputs.url_callback：可传入url字符串，当报告生成后，会调用该url进行回调。该url请使用post请求，接收报告字段为report_content，会话id字段为conversation_id。
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 面试模式：text - 文本模式，video - 视频模式
         */
        "interviewMode"?: 'text' | 'video';
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMnmsZpModalCustomEvent<ConversationStartEventData>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMnmsZpModalCustomEvent<InterviewCompleteEventData>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMnmsZpModalCustomEvent<void>) => void;
        /**
          * 录制错误事件
         */
        "onRecordingError"?: (event: PcmMnmsZpModalCustomEvent<RecordingErrorEventData>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmMnmsZpModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMnmsZpModalCustomEvent<StreamCompleteEventData>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMnmsZpModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMnmsZpModalCustomEvent<FileUploadResponse>) => void;
        /**
          * 是否显示复制按钮
         */
        "showCopyButton"?: boolean;
        /**
          * 是否显示点赞点踩按钮
         */
        "showFeedbackButtons"?: boolean;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 面试报告
     */
    interface PcmMsbgModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_urls时，会隐藏简历上传区域。<br> 传入customInputs.file_urls和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmMsbgModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmMsbgModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmMsbgModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmMsbgModalCustomEvent<ErrorEventDetail1>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmMsbgModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmMsbgModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmMsbgModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    /**
     * 千岗千简历
     */
    interface PcmQgqjlModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.job_info时，会隐藏JD输入区域<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmQgqjlModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当聊天完成时触发
         */
        "onInterviewComplete"?: (event: PcmQgqjlModalCustomEvent<InterviewCompleteEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmQgqjlModalCustomEvent<void>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmQgqjlModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmQgqjlModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmQgqjlModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmQgqjlModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZskChatModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义智能体inputs输入参数:<br> 1. show_suggested_questions: 是否显示推荐问题<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 数字员工ID，从聘才猫开发平台创建数字员工后，点击导出获取
         */
        "employeeId": string;
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL，如果未设置则使用智能体头像
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 语音录制最大时长（秒）
         */
        "maxAudioRecordingTime"?: number;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 当点击清除对话记录按钮时触发
         */
        "onClearConversation"?: (event: PcmZskChatModalCustomEvent<string>) => void;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmZskChatModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmZskChatModalCustomEvent<void>) => void;
        /**
          * 一轮对话结束时的回调
         */
        "onStreamComplete"?: (event: PcmZskChatModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmZskChatModalCustomEvent<void>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface PcmZyghModal {
        /**
          * 会话ID，传入继续对话，否则创建新会话
         */
        "conversationId"?: string;
        /**
          * 自定义输入参数，传入customInputs.type则可以指定规划类型，可传入"长期规划"、"转行建议"、"晋升路径"<br> 传入customInputs.file_url时，会隐藏简历上传区域。<br> 传入customInputs.file_url和customInputs.job_info时，会直接开始聊天。<br>
         */
        "customInputs"?: Record<string, string>;
        /**
          * 默认查询文本
         */
        "defaultQuery"?: string;
        /**
          * 附件预览模式 'drawer': 在右侧抽屉中预览 'window': 在新窗口中打开
         */
        "filePreviewMode"?: 'drawer' | 'window';
        /**
          * 是否以全屏模式打开，移动端建议设置为true
         */
        "fullscreen"?: boolean;
        /**
          * 应用图标URL
         */
        "icon"?: string;
        /**
          * 是否展示右上角的关闭按钮
         */
        "isNeedClose"?: boolean;
        /**
          * 是否显示聊天模态框
         */
        "isOpen"?: boolean;
        /**
          * 是否展示顶部标题栏
         */
        "isShowHeader"?: boolean;
        /**
          * 模态框标题
         */
        "modalTitle"?: string;
        /**
          * 新会话开始的回调，只会在一轮对话开始时触发一次
         */
        "onConversationStart"?: (event: PcmZyghModalCustomEvent<ConversationStartEventData1>) => void;
        /**
          * 当点击模态框关闭时触发
         */
        "onModalClosed"?: (event: PcmZyghModalCustomEvent<void>) => void;
        /**
          * 当聊天完成时触发
         */
        "onPlanningComplete"?: (event: PcmZyghModalCustomEvent<{
        conversation_id: string;
        type: CareerPlanType;
    }>) => void;
        /**
          * 错误事件
         */
        "onSomeErrorEvent"?: (event: PcmZyghModalCustomEvent<ErrorEventDetail>) => void;
        /**
          * 流式输出完成事件
         */
        "onStreamComplete"?: (event: PcmZyghModalCustomEvent<StreamCompleteEventData1>) => void;
        /**
          * SDK密钥验证失败事件
         */
        "onTokenInvalid"?: (event: PcmZyghModalCustomEvent<void>) => void;
        /**
          * 上传成功事件
         */
        "onUploadSuccess"?: (event: PcmZyghModalCustomEvent<FileUploadResponse>) => void;
        /**
          * SDK鉴权密钥
         */
        "token": string;
        /**
          * 聊天框的页面层级
         */
        "zIndex"?: number;
    }
    interface IntrinsicElements {
        "pcm-1zhanshi-mnms-modal": Pcm1zhanshiMnmsModal;
        "pcm-app-chat-modal": PcmAppChatModal;
        "pcm-button": PcmButton;
        "pcm-card": PcmCard;
        "pcm-chat-message": PcmChatMessage;
        "pcm-drawer": PcmDrawer;
        "pcm-hr-chat-modal": PcmHrChatModal;
        "pcm-htws-modal": PcmHtwsModal;
        "pcm-hyzj-modal": PcmHyzjModal;
        "pcm-jd-modal": PcmJdModal;
        "pcm-jlpp-modal": PcmJlppModal;
        "pcm-jlsx-modal": PcmJlsxModal;
        "pcm-message": PcmMessage;
        "pcm-mnct-modal": PcmMnctModal;
        "pcm-mnms-modal": PcmMnmsModal;
        "pcm-mnms-video-modal": PcmMnmsVideoModal;
        "pcm-mnms-zp-modal": PcmMnmsZpModal;
        "pcm-msbg-modal": PcmMsbgModal;
        "pcm-qgqjl-modal": PcmQgqjlModal;
        "pcm-zsk-chat-modal": PcmZskChatModal;
        "pcm-zygh-modal": PcmZyghModal;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            /**
             * 模拟面试
             */
            "pcm-1zhanshi-mnms-modal": LocalJSX.Pcm1zhanshiMnmsModal & JSXBase.HTMLAttributes<HTMLPcm1zhanshiMnmsModalElement>;
            "pcm-app-chat-modal": LocalJSX.PcmAppChatModal & JSXBase.HTMLAttributes<HTMLPcmAppChatModalElement>;
            /**
             * 按钮组件
             * 一个简化版的类似于 ant-design 的按钮组件，支持自定义文字、颜色、圆角等属性
             */
            "pcm-button": LocalJSX.PcmButton & JSXBase.HTMLAttributes<HTMLPcmButtonElement>;
            /**
             * 智能体卡片组件
             * 用于展示各业务功能入口，点击后根据回调打开对应的模态框
             */
            "pcm-card": LocalJSX.PcmCard & JSXBase.HTMLAttributes<HTMLPcmCardElement>;
            "pcm-chat-message": LocalJSX.PcmChatMessage & JSXBase.HTMLAttributes<HTMLPcmChatMessageElement>;
            /**
             * 抽屉组件
             * 从屏幕边缘滑出的浮层面板，类似 Ant Design 的 Drawer 组件
             */
            "pcm-drawer": LocalJSX.PcmDrawer & JSXBase.HTMLAttributes<HTMLPcmDrawerElement>;
            "pcm-hr-chat-modal": LocalJSX.PcmHrChatModal & JSXBase.HTMLAttributes<HTMLPcmHrChatModalElement>;
            /**
             * 劳动合同卫士
             */
            "pcm-htws-modal": LocalJSX.PcmHtwsModal & JSXBase.HTMLAttributes<HTMLPcmHtwsModalElement>;
            /**
             * 会议总结助手
             */
            "pcm-hyzj-modal": LocalJSX.PcmHyzjModal & JSXBase.HTMLAttributes<HTMLPcmHyzjModalElement>;
            /**
             * 职位生成组件
             */
            "pcm-jd-modal": LocalJSX.PcmJdModal & JSXBase.HTMLAttributes<HTMLPcmJdModalElement>;
            /**
             * 简历匹配
             */
            "pcm-jlpp-modal": LocalJSX.PcmJlppModal & JSXBase.HTMLAttributes<HTMLPcmJlppModalElement>;
            "pcm-jlsx-modal": LocalJSX.PcmJlsxModal & JSXBase.HTMLAttributes<HTMLPcmJlsxModalElement>;
            "pcm-message": LocalJSX.PcmMessage & JSXBase.HTMLAttributes<HTMLPcmMessageElement>;
            /**
             * 模拟出题大师
             */
            "pcm-mnct-modal": LocalJSX.PcmMnctModal & JSXBase.HTMLAttributes<HTMLPcmMnctModalElement>;
            /**
             * 模拟面试
             */
            "pcm-mnms-modal": LocalJSX.PcmMnmsModal & JSXBase.HTMLAttributes<HTMLPcmMnmsModalElement>;
            /**
             * 模拟面试
             */
            "pcm-mnms-video-modal": LocalJSX.PcmMnmsVideoModal & JSXBase.HTMLAttributes<HTMLPcmMnmsVideoModalElement>;
            /**
             * 模拟面试
             */
            "pcm-mnms-zp-modal": LocalJSX.PcmMnmsZpModal & JSXBase.HTMLAttributes<HTMLPcmMnmsZpModalElement>;
            /**
             * 面试报告
             */
            "pcm-msbg-modal": LocalJSX.PcmMsbgModal & JSXBase.HTMLAttributes<HTMLPcmMsbgModalElement>;
            /**
             * 千岗千简历
             */
            "pcm-qgqjl-modal": LocalJSX.PcmQgqjlModal & JSXBase.HTMLAttributes<HTMLPcmQgqjlModalElement>;
            "pcm-zsk-chat-modal": LocalJSX.PcmZskChatModal & JSXBase.HTMLAttributes<HTMLPcmZskChatModalElement>;
            "pcm-zygh-modal": LocalJSX.PcmZyghModal & JSXBase.HTMLAttributes<HTMLPcmZyghModalElement>;
        }
    }
}
